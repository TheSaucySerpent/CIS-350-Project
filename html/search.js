window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "main.main", "modulename": "main", "qualname": "main", "kind": "function", "doc": "<p>The main function that initializes the game, opens the intro screen, and runs the game loop.</p>\n\n<p>It initializes the pygame library, creates the game screen, and sets up game-related objects.\nIt manages the game's main loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character", "modulename": "character", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "character.Character", "modulename": "character", "qualname": "Character", "kind": "class", "doc": "<p>Class used for all moving entities, including the player and enemies.</p>\n"}, {"fullname": "character.Character.__init__", "modulename": "character", "qualname": "Character.__init__", "kind": "function", "doc": "<p>Initializes the character</p>\n\n<p>Args:\nname (str): The name of the character.\nx (int): The x-coordinate of the character's position.\ny (int): The y-coordinate of the character's position.\nwidth (int): The width of the character.\nheight (int): The height of the character.\nspeed (int): The movement speed of the character.\nhealth (int): The current health of the character.\narmor (int): The armor rating of the character.\ngun (Weapon): The type of gun the character wields.\nimage_path (str, optional): Path to the image for the character (If none is given, uses a color instead.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span>,</span><span class=\"param\">\t<span class=\"n\">health</span>,</span><span class=\"param\">\t<span class=\"n\">armor</span>,</span><span class=\"param\">\t<span class=\"n\">gun</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "character.Character.name", "modulename": "character", "qualname": "Character.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.x", "modulename": "character", "qualname": "Character.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.y", "modulename": "character", "qualname": "Character.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.width", "modulename": "character", "qualname": "Character.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.height", "modulename": "character", "qualname": "Character.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.speed", "modulename": "character", "qualname": "Character.speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.health", "modulename": "character", "qualname": "Character.health", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.max_health", "modulename": "character", "qualname": "Character.max_health", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.armor", "modulename": "character", "qualname": "Character.armor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.gun", "modulename": "character", "qualname": "Character.gun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.last_hurt", "modulename": "character", "qualname": "Character.last_hurt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.last_dodge", "modulename": "character", "qualname": "Character.last_dodge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.invulnerable", "modulename": "character", "qualname": "Character.invulnerable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.image_index", "modulename": "character", "qualname": "Character.image_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.image", "modulename": "character", "qualname": "Character.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.picked_up", "modulename": "character", "qualname": "Character.picked_up", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.inventory", "modulename": "character", "qualname": "Character.inventory", "kind": "variable", "doc": "<p>self.image_path = {\n'up': ['images/Up standing.png', 'images/Up running.png'],\n'down': ['images/Down standing.png', 'images/Down running.png'],\n'left': ['images/Left standing.png', 'images/Left running .png'],\n'right': ['images/1.png', 'images/BackgroundEraser_image.png']\n}</p>\n"}, {"fullname": "character.Character.image_path", "modulename": "character", "qualname": "Character.image_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.direction", "modulename": "character", "qualname": "Character.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.image_change_delay", "modulename": "character", "qualname": "Character.image_change_delay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.frame_count", "modulename": "character", "qualname": "Character.frame_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "character.Character.load_images", "modulename": "character", "qualname": "Character.load_images", "kind": "function", "doc": "<p>Load character images for different directions.</p>\n\n<p>Loads images for character animations in different directions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.set_image", "modulename": "character", "qualname": "Character.set_image", "kind": "function", "doc": "<p>Set the character's image based on the current direction and animation frame.</p>\n\n<p>Args:\n    direction (str): The direction in which the character is facing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">direction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.move", "modulename": "character", "qualname": "Character.move", "kind": "function", "doc": "<p>Method used for normal movement as well as dodge. Moves the given Character by their speed</p>\n\n<p>Args:\nkeys (arr): The key pressed determines the direction the speed is added to\nextra_speed (int): Gets added to the character's base speed, used for dodge ability\nis_invulnerable (bool, optional): Used to make the player invulnerable during dodge</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">screen_height</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span>,</span><span class=\"param\">\t<span class=\"n\">extra_speed</span>,</span><span class=\"param\">\t<span class=\"n\">is_invulnerable</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.get_x", "modulename": "character", "qualname": "Character.get_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.get_y", "modulename": "character", "qualname": "Character.get_y", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.take_damage", "modulename": "character", "qualname": "Character.take_damage", "kind": "function", "doc": "<p>Reduce the character's health by a specified amount of damage.\nThis method calculates damage based on the character's health and armor and updates both accordingly.</p>\n\n<p>Args:\ndamage (int): The amount of damage to subtract from the character's health.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">damage</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.heal", "modulename": "character", "qualname": "Character.heal", "kind": "function", "doc": "<p>Increase the character's health by a specified amount, up to the maximum health. Used exlusively for medkits.</p>\n\n<p>Args:\namount (int): The amount of health to add to the character.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.draw", "modulename": "character", "qualname": "Character.draw", "kind": "function", "doc": "<p>Draw the character on the screen.\nIf an image is available, it is drawn; otherwise, a blue rectangle is drawn to represent the character.</p>\n\n<p>Args:\nscreen (pygame.Surface): The pygame screen surface on which to draw the character.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.pick_up", "modulename": "character", "qualname": "Character.pick_up", "kind": "function", "doc": "<p>Allow the character to pick up items from the current room.\nThis method sees if the chracter pressed e on an item, and, if so, adds it to inventory.</p>\n\n<p>Args:\ncurrent_room (Room): The current room the character is in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_room</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "character.Character.update_position", "modulename": "character", "qualname": "Character.update_position", "kind": "function", "doc": "<p>Update the object's position to the character inventory if it's picked up</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "colors", "modulename": "colors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "colors.RED", "modulename": "colors", "qualname": "RED", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 0, 0)"}, {"fullname": "colors.GRAY", "modulename": "colors", "qualname": "GRAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "(150, 150, 150)"}, {"fullname": "colors.WHITE", "modulename": "colors", "qualname": "WHITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 255, 255)"}, {"fullname": "colors.BLACK", "modulename": "colors", "qualname": "BLACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0, 0)"}, {"fullname": "colors.GREEN", "modulename": "colors", "qualname": "GREEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 255, 0)"}, {"fullname": "colors.YELLOW", "modulename": "colors", "qualname": "YELLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 255, 0)"}, {"fullname": "colors.BLUE", "modulename": "colors", "qualname": "BLUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0, 255)"}, {"fullname": "enemy", "modulename": "enemy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "enemy.Enemy", "modulename": "enemy", "qualname": "Enemy", "kind": "class", "doc": "<p>Class for all Enemy Characters. Inherits from Character.</p>\n", "bases": "character.Character"}, {"fullname": "enemy.Enemy.__init__", "modulename": "enemy", "qualname": "Enemy.__init__", "kind": "function", "doc": "<p>Args:\nname (str): The name of the enemy.\nx (int): The x-coordinate of the enemy's position.\ny (int): The y-coordinate of the enemy's position.\nwidth (int): The width of the enemy.\nheight (int): The height of the enemy.\nspeed (int): The movement speed of the enemy.\nhealth (int): The health of the enemy.\narmor (int): The armor rating of the enemy.\ngun (Weapon): The type of gun the enemy wields.\ncharacter: The player character (or target) that the enemy is moving towards.\ndamage (int): The damage dealt by the enemy.\nimage_path (str, optional): Path to the image for the enemy (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span>,</span><span class=\"param\">\t<span class=\"n\">health</span>,</span><span class=\"param\">\t<span class=\"n\">armor</span>,</span><span class=\"param\">\t<span class=\"n\">gun</span>,</span><span class=\"param\">\t<span class=\"n\">character</span>,</span><span class=\"param\">\t<span class=\"n\">damage</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "enemy.Enemy.character", "modulename": "enemy", "qualname": "Enemy.character", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "enemy.Enemy.damage", "modulename": "enemy", "qualname": "Enemy.damage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "enemy.Enemy.image_path", "modulename": "enemy", "qualname": "Enemy.image_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "enemy.Enemy.move_towards_character", "modulename": "enemy", "qualname": "Enemy.move_towards_character", "kind": "function", "doc": "<p>Moves the enemy towards the player. Will be edited when enemy weapons are added.\nCalculates the direction vector toward the target character, normalizes it, and updates the enemy's\nposition based on speed and direction.\nChecks for collisions with the target character and deals damage\nto the target character if they collide.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.draw", "modulename": "enemy", "qualname": "Enemy.draw", "kind": "function", "doc": "<p>Draw the enemy character on the screen.\nIf an image is available, it is drawn. Otherwise, a blue rectangle is drawn in its place.</p>\n\n<p>Args:\n    screen (pygame.Surface): The pygame screen surface on which to draw the enemy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Default", "modulename": "enemy", "qualname": "Default", "kind": "class", "doc": "<p>A prebuilt instance of enemy, used for efficiently adding enemies to the first 3 levels</p>\n", "bases": "Enemy"}, {"fullname": "enemy.Default.__init__", "modulename": "enemy", "qualname": "Default.__init__", "kind": "function", "doc": "<p>Args:\nname (str): The name of the enemy.\nx (int): The x-coordinate of the enemy's position.\ny (int): The y-coordinate of the enemy's position.\nwidth (int): The width of the enemy.\nheight (int): The height of the enemy.\nspeed (int): The movement speed of the enemy.\nhealth (int): The health of the enemy.\narmor (int): The armor rating of the enemy.\ngun (Weapon): The type of gun the enemy wields.\ncharacter: The player character (or target) that the enemy is moving towards.\ndamage (int): The damage dealt by the enemy.\nimage_path (str, optional): Path to the image for the enemy (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">player</span></span>)</span>"}, {"fullname": "enemy.Tank", "modulename": "enemy", "qualname": "Tank", "kind": "class", "doc": "<p>A prebuilt instance of enemy, used for efficiently adding enemies to the first 3 levels</p>\n", "bases": "Enemy"}, {"fullname": "enemy.Tank.__init__", "modulename": "enemy", "qualname": "Tank.__init__", "kind": "function", "doc": "<p>Args:\nname (str): The name of the enemy.\nx (int): The x-coordinate of the enemy's position.\ny (int): The y-coordinate of the enemy's position.\nwidth (int): The width of the enemy.\nheight (int): The height of the enemy.\nspeed (int): The movement speed of the enemy.\nhealth (int): The health of the enemy.\narmor (int): The armor rating of the enemy.\ngun (Weapon): The type of gun the enemy wields.\ncharacter: The player character (or target) that the enemy is moving towards.\ndamage (int): The damage dealt by the enemy.\nimage_path (str, optional): Path to the image for the enemy (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">player</span></span>)</span>"}, {"fullname": "enemy.Runner", "modulename": "enemy", "qualname": "Runner", "kind": "class", "doc": "<p>A prebuilt instance of enemy, used for efficiently adding enemies to the first 3 levels</p>\n", "bases": "Enemy"}, {"fullname": "enemy.Runner.__init__", "modulename": "enemy", "qualname": "Runner.__init__", "kind": "function", "doc": "<p>Args:\nname (str): The name of the enemy.\nx (int): The x-coordinate of the enemy's position.\ny (int): The y-coordinate of the enemy's position.\nwidth (int): The width of the enemy.\nheight (int): The height of the enemy.\nspeed (int): The movement speed of the enemy.\nhealth (int): The health of the enemy.\narmor (int): The armor rating of the enemy.\ngun (Weapon): The type of gun the enemy wields.\ncharacter: The player character (or target) that the enemy is moving towards.\ndamage (int): The damage dealt by the enemy.\nimage_path (str, optional): Path to the image for the enemy (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">player</span></span>)</span>"}, {"fullname": "game_functions", "modulename": "game_functions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game", "modulename": "game_functions", "qualname": "Game", "kind": "class", "doc": "<p>Class used for all game functions. run_game function called in main.</p>\n"}, {"fullname": "game_functions.Game.__init__", "modulename": "game_functions", "qualname": "Game.__init__", "kind": "function", "doc": "<p>Initialize the game.</p>\n\n<p>Args:\n    screen: The game screen.\n    screen_width (int): The width of the screen.\n    screen_height (int): The height of the screen.\n    user_interface (UI): The user interface of the game.\n    font: The font used for text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span>, </span><span class=\"param\"><span class=\"n\">user_interface</span>, </span><span class=\"param\"><span class=\"n\">font</span></span>)</span>"}, {"fullname": "game_functions.Game.screen", "modulename": "game_functions", "qualname": "Game.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.screen_width", "modulename": "game_functions", "qualname": "Game.screen_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.screen_height", "modulename": "game_functions", "qualname": "Game.screen_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.user_interface", "modulename": "game_functions", "qualname": "Game.user_interface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.font", "modulename": "game_functions", "qualname": "Game.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.player", "modulename": "game_functions", "qualname": "Game.player", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.obj", "modulename": "game_functions", "qualname": "Game.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.enemies", "modulename": "game_functions", "qualname": "Game.enemies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.current_room", "modulename": "game_functions", "qualname": "Game.current_room", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.game_over", "modulename": "game_functions", "qualname": "Game.game_over", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.doors", "modulename": "game_functions", "qualname": "Game.doors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.room", "modulename": "game_functions", "qualname": "Game.room", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.guns", "modulename": "game_functions", "qualname": "Game.guns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.key", "modulename": "game_functions", "qualname": "Game.key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.medkit", "modulename": "game_functions", "qualname": "Game.medkit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.items", "modulename": "game_functions", "qualname": "Game.items", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.r6", "modulename": "game_functions", "qualname": "Game.r6", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.rooms", "modulename": "game_functions", "qualname": "Game.rooms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.prev_screen_width", "modulename": "game_functions", "qualname": "Game.prev_screen_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.prev_screen_height", "modulename": "game_functions", "qualname": "Game.prev_screen_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.crosshair", "modulename": "game_functions", "qualname": "Game.crosshair", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "game_functions.Game.setup_game", "modulename": "game_functions", "qualname": "Game.setup_game", "kind": "function", "doc": "<p>Creates the starting variables of the game\nplayer = the main character used everywhere\nobj = the object class\nenemies = list of starting enemies\nroom = Room class\ncurrent_room = Starting room\ngame_over = Boolean to determine if the game is over</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "game_functions.Game.run_game", "modulename": "game_functions", "qualname": "Game.run_game", "kind": "function", "doc": "<p>Runs the game loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "game_functions.Game.render_assets", "modulename": "game_functions", "qualname": "Game.render_assets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "game_functions.Game.save_game_state", "modulename": "game_functions", "qualname": "Game.save_game_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "game_functions.Game.load_game_state", "modulename": "game_functions", "qualname": "Game.load_game_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "item", "modulename": "item", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "item.Item", "modulename": "item", "qualname": "Item", "kind": "class", "doc": "<p>Class for items, anything that can be picked up is qualified as an item.</p>\n"}, {"fullname": "item.Item.__init__", "modulename": "item", "qualname": "Item.__init__", "kind": "function", "doc": "<p>Initialize an Item</p>\n\n<p>Args:\nname (str): The name of the given Item.\nx (int): The x-coordinate of the object.\ny (int): The y-coordinate of the object.\nwidth (int): The width of the object.\nheight (int): The height of the object.\nimage_path (str, optional): Path to the image for the object (default is None).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">screen_height</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "item.Item.name", "modulename": "item", "qualname": "Item.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.x", "modulename": "item", "qualname": "Item.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.y", "modulename": "item", "qualname": "Item.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.original_y", "modulename": "item", "qualname": "Item.original_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.width", "modulename": "item", "qualname": "Item.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.height", "modulename": "item", "qualname": "Item.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.obj_rect", "modulename": "item", "qualname": "Item.obj_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.bounce_speed", "modulename": "item", "qualname": "Item.bounce_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.bounce_direction", "modulename": "item", "qualname": "Item.bounce_direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.image", "modulename": "item", "qualname": "Item.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "item.Item.load_image", "modulename": "item", "qualname": "Item.load_image", "kind": "function", "doc": "<p>Load and scale the image for the object.</p>\n\n<p>This method loads an image specified by the image_path and scales it to the object's width and height.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "item.Item.bounce", "modulename": "item", "qualname": "Item.bounce", "kind": "function", "doc": "<p>Update the y position for bouncing and handle bounce limits.</p>\n\n<p>This method updates the y position of the object for bouncing and reverses the bounce direction when reaching\nthe bounce limits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "item.Item.draw", "modulename": "item", "qualname": "Item.draw", "kind": "function", "doc": "<p>Draw the object on the screen.</p>\n\n<p>Args:\n    screen (pygame.Surface): The pygame screen surface on which to draw the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "object", "modulename": "object", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "object.Object", "modulename": "object", "qualname": "Object", "kind": "class", "doc": "<p>The class used for all objects in the game. Specifically, any static with collision is classified as an object.</p>\n"}, {"fullname": "object.Object.__init__", "modulename": "object", "qualname": "Object.__init__", "kind": "function", "doc": "<p>Initialize an Object.</p>\n\n<p>Args:\n    x (int): The x-coordinate of the object.\n    y (int): The y-coordinate of the object.\n    width (int): The width of the object.\n    height (int): The height of the object.\n    health (int): The health of the object, ended up unused\n    image_path (str): The path to the image for the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">health</span>, </span><span class=\"param\"><span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "object.Object.x", "modulename": "object", "qualname": "Object.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.y", "modulename": "object", "qualname": "Object.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.width", "modulename": "object", "qualname": "Object.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.height", "modulename": "object", "qualname": "Object.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.health", "modulename": "object", "qualname": "Object.health", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.obj_rect", "modulename": "object", "qualname": "Object.obj_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.image", "modulename": "object", "qualname": "Object.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Object.collision", "modulename": "object", "qualname": "Object.collision", "kind": "function", "doc": "<p>Handle collision between objects and entities using pygame's built-in rectangle collision functions.\nAdds or subtracts from the entity's x and y values corresponding to the direction in which they collide.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span>, </span><span class=\"param\"><span class=\"n\">entities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "object.Object.load_image", "modulename": "object", "qualname": "Object.load_image", "kind": "function", "doc": "<p>Load and scale the image for the object.</p>\n\n<p>This method loads an image specified by the image_path and scales it to the object's width and height.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "object.Object.draw", "modulename": "object", "qualname": "Object.draw", "kind": "function", "doc": "<p>Draw the object on the screen.</p>\n\n<p>Args:\n    screen: The screen to draw the object on.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "object.Door", "modulename": "object", "qualname": "Door", "kind": "class", "doc": "<p>Door Class, used to have custom collision and image paths with an object</p>\n", "bases": "Object"}, {"fullname": "object.Door.__init__", "modulename": "object", "qualname": "Door.__init__", "kind": "function", "doc": "<p>Initialize a door</p>\n\n<p>Args\nx (int): The x coordinate of the door\ny (int): The y coordinate of the door\nwidth (int): The width of the door\nheight (int): The height of the door\nhealth (int): The health of the door, ended up unused\nimage_path (str): The path to the image for the door.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">health</span>, </span><span class=\"param\"><span class=\"n\">image_path</span></span>)</span>"}, {"fullname": "object.Door.rect", "modulename": "object", "qualname": "Door.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "object.Door.collision", "modulename": "object", "qualname": "Door.collision", "kind": "function", "doc": "<p>Handles the collision and use of the door\nCreates an instance of the player's hitbox, then checks if it collides with the door and if the player has a key in their inventory.</p>\n\n<p>returns Boolean, updates room if True, ignores if False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span>, </span><span class=\"param\"><span class=\"n\">entities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room", "modulename": "room", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "room.Room", "modulename": "room", "qualname": "Room", "kind": "class", "doc": "<p>Class for all Rooms, used to create, draw, and add to rooms.</p>\n"}, {"fullname": "room.Room.__init__", "modulename": "room", "qualname": "Room.__init__", "kind": "function", "doc": "<p>Initialize a Room object.</p>\n\n<p>Args:\n    background_path (str): Path to the background image for the room.\n    screen_width (int): Width of the screen.\n    screen_height (int): Height of the screen.\n    characters (list): List to hold player character.\n    enemies (list): List to hold Enemies. Defaults to an empty list.\n    objects (list): List to hold Objects. Defaults to an empty list.\n    weapons (list): List to hold Weapons. Defaults to an empty list.\n    items (list): List to hold Items. Defaults to an empty list.\n    entities (list): List to hold general Entities. Defaults to an empty list.\n    door (Door): Door to next room. Defaults to None.\n    next_room (Any): Reference to the next room. Defaults to None. Needs to be added if there's a door.\n    starting_x (int): X-coordinate where the player starts in the room. Defaults to 100.\n    starting_y (int): Y-coordinate where the player starts in the room. Defaults to 100.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">background_path</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span></span>)</span>"}, {"fullname": "room.Room.name", "modulename": "room", "qualname": "Room.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.background_path", "modulename": "room", "qualname": "Room.background_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.screen_width", "modulename": "room", "qualname": "Room.screen_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.screen_height", "modulename": "room", "qualname": "Room.screen_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.background", "modulename": "room", "qualname": "Room.background", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.characters", "modulename": "room", "qualname": "Room.characters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.enemies", "modulename": "room", "qualname": "Room.enemies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.objects", "modulename": "room", "qualname": "Room.objects", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.weapons", "modulename": "room", "qualname": "Room.weapons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.items", "modulename": "room", "qualname": "Room.items", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.entities", "modulename": "room", "qualname": "Room.entities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.door", "modulename": "room", "qualname": "Room.door", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.next_room", "modulename": "room", "qualname": "Room.next_room", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.starting_x", "modulename": "room", "qualname": "Room.starting_x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.starting_y", "modulename": "room", "qualname": "Room.starting_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "room.Room.add_item", "modulename": "room", "qualname": "Room.add_item", "kind": "function", "doc": "<p>Add an Item to the room.</p>\n\n<p>Args:\n    item (Item): Item object to add to the room.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.add_character", "modulename": "room", "qualname": "Room.add_character", "kind": "function", "doc": "<p>Add a Character to the room.</p>\n\n<p>Args:\n    character (Character): Character object to add to the room.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">character</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.add_enemy", "modulename": "room", "qualname": "Room.add_enemy", "kind": "function", "doc": "<p>Add an Enemy to the room.</p>\n\n<p>Args:\n    enemy (Enemy): Enemy object to add to the room.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.add_object", "modulename": "room", "qualname": "Room.add_object", "kind": "function", "doc": "<p>Add an Object to the room.</p>\n\n<p>Args:\n    obj (Object): Object to add to the room.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.add_weapon", "modulename": "room", "qualname": "Room.add_weapon", "kind": "function", "doc": "<p>Add a Weapon to the room.</p>\n\n<p>Args:\n    weapon (Weapon): Weapon object to add to the room.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">weapon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.draw", "modulename": "room", "qualname": "Room.draw", "kind": "function", "doc": "<p>Draw the room, along with its items, characters, enemies, objects, and weapons.</p>\n\n<p>Args:\n    screen (pygame.Surface): The pygame screen surface on which to draw the room and objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "room.Room.scale", "modulename": "room", "qualname": "Room.scale", "kind": "function", "doc": "<p>Used to scale the room to a specified width and height.\nArgs:\n    prev_screen_width = previous screen width\n    prev_screen_height = previous screen height\n    new_screen_width = new screen width\n    new_screen_height = new screen height</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">prev_screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">prev_screen_height</span>,</span><span class=\"param\">\t<span class=\"n\">new_screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">new_screen_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "UI", "modulename": "UI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "UI.menu_background_options", "modulename": "UI", "qualname": "menu_background_options", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;images/menu_background1.png&#x27;, &#x27;images/menu_background2.png&#x27;, &#x27;images/menu_background3.png&#x27;, &#x27;images/menu_background4.png&#x27;, &#x27;images/menu_background5.png&#x27;]"}, {"fullname": "UI.menu_background_selection", "modulename": "UI", "qualname": "menu_background_selection", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;images/menu_background5.png&#x27;"}, {"fullname": "UI.UI", "modulename": "UI", "qualname": "UI", "kind": "class", "doc": "<p>Class for the game's user interface and relevant menus that are displayed throughout the game.</p>\n"}, {"fullname": "UI.UI.__init__", "modulename": "UI", "qualname": "UI.__init__", "kind": "function", "doc": "<p>constructor for the user interface.</p>\n\n<p>Args:\n    screen (pygame.display): The game screen itself.\n    screen_width (int): The width of the game screen\n    screen_height (int): The height of the game screen\n    font (pygame.font.Font): The font we wish to use for relevant text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span>, </span><span class=\"param\"><span class=\"n\">font</span></span>)</span>"}, {"fullname": "UI.UI.screen", "modulename": "UI", "qualname": "UI.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "UI.UI.screen_width", "modulename": "UI", "qualname": "UI.screen_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "UI.UI.screen_height", "modulename": "UI", "qualname": "UI.screen_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "UI.UI.font", "modulename": "UI", "qualname": "UI.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "UI.UI.display_startup_menu", "modulename": "UI", "qualname": "UI.display_startup_menu", "kind": "function", "doc": "<p>Display the startup menu with a random background.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "UI.UI.display_death_menu", "modulename": "UI", "qualname": "UI.display_death_menu", "kind": "function", "doc": "<p>Display the death menu with the death screen background image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "UI.UI.display_player_stats", "modulename": "UI", "qualname": "UI.display_player_stats", "kind": "function", "doc": "<p>Display the player's health and ammo stats on the screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "UI.UI.display_player_inventory", "modulename": "UI", "qualname": "UI.display_player_inventory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons", "modulename": "weapons", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon", "modulename": "weapons", "qualname": "Weapon", "kind": "class", "doc": "<p>Class for all weapons, Parent of Shotgun</p>\n", "bases": "item.Item"}, {"fullname": "weapons.Weapon.__init__", "modulename": "weapons", "qualname": "Weapon.__init__", "kind": "function", "doc": "<p>Init for Weapon</p>\n\n<p>Args:\nname (str): The name of the weapon.\ndamage (int): The damage dealt by the weapon.\nproj_speed (int): The projectile speed of the weapon.\nattack_speed (int): The rate of fire for the weapon (attacks per second).\nmag_size (int): The magazine size of the weapon.\nmag_count (int): The number of magazines the weapon has.\nreload_speed (int): The reload speed of the weapon.\nowner: The entity (e.g., player or enemy) that owns the weapon.\nimage_path (str, optional): Path to the image for the weapon (default is None). This will be used in the future to display a weapon design.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">damage</span>,</span><span class=\"param\">\t<span class=\"n\">proj_speed</span>,</span><span class=\"param\">\t<span class=\"n\">attack_speed</span>,</span><span class=\"param\">\t<span class=\"n\">mag_size</span>,</span><span class=\"param\">\t<span class=\"n\">mag_count</span>,</span><span class=\"param\">\t<span class=\"n\">reload_speed</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">screen_height</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "weapons.Weapon.owner", "modulename": "weapons", "qualname": "Weapon.owner", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.damage", "modulename": "weapons", "qualname": "Weapon.damage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.attack_speed", "modulename": "weapons", "qualname": "Weapon.attack_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.proj_speed", "modulename": "weapons", "qualname": "Weapon.proj_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.mag_size", "modulename": "weapons", "qualname": "Weapon.mag_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.mag_ammo", "modulename": "weapons", "qualname": "Weapon.mag_ammo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.mag_count", "modulename": "weapons", "qualname": "Weapon.mag_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.reload_speed", "modulename": "weapons", "qualname": "Weapon.reload_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.last_attack", "modulename": "weapons", "qualname": "Weapon.last_attack", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.last_reload", "modulename": "weapons", "qualname": "Weapon.last_reload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.projectiles", "modulename": "weapons", "qualname": "Weapon.projectiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.image_path", "modulename": "weapons", "qualname": "Weapon.image_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Weapon.attack", "modulename": "weapons", "qualname": "Weapon.attack", "kind": "function", "doc": "<p>Attack with the weapon.</p>\n\n<p>This method checks if enough time has passed since the last shot to fire again. If the owner is the player, it also\nchecks if there is enough ammunition in the magazine. It then calculates the direction and creates a new\nprojectile. The method updates the last attack time and decreases the magazine ammo.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Weapon.update_projectiles", "modulename": "weapons", "qualname": "Weapon.update_projectiles", "kind": "function", "doc": "<p>Move and update all active projectiles.</p>\n\n<p>This method updates the position of all active projectiles, and removes any projectiles that collide with something.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span>, </span><span class=\"param\"><span class=\"n\">current_room</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Weapon.reload", "modulename": "weapons", "qualname": "Weapon.reload", "kind": "function", "doc": "<p>Reload the weapon.</p>\n\n<p>This method checks if enough time has passed since the last reload to reload the weapon. If there are magazines\nremaining, it reloads the weapon by filling the magazine ammo and decreases the magazine count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Projectile", "modulename": "weapons", "qualname": "Projectile", "kind": "class", "doc": "<p>Class used for all projectiles sent out from all weapons.</p>\n"}, {"fullname": "weapons.Projectile.__init__", "modulename": "weapons", "qualname": "Projectile.__init__", "kind": "function", "doc": "<p>Args:\nx (int): The x-coordinate of the projectile's position.\ny (int): The y-coordinate of the projectile's position.\nwidth (int): The width of the projectile.\nheight (int): The height of the projectile.\nspeed (int): The speed of the projectile.\ndirection (float): The direction in degrees in which the projectile is traveling.\ndamage (int): The damage dealt by the projectile.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">speed</span>, </span><span class=\"param\"><span class=\"n\">direction</span>, </span><span class=\"param\"><span class=\"n\">damage</span></span>)</span>"}, {"fullname": "weapons.Projectile.x", "modulename": "weapons", "qualname": "Projectile.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.y", "modulename": "weapons", "qualname": "Projectile.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.width", "modulename": "weapons", "qualname": "Projectile.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.height", "modulename": "weapons", "qualname": "Projectile.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.speed", "modulename": "weapons", "qualname": "Projectile.speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.direction", "modulename": "weapons", "qualname": "Projectile.direction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.damage", "modulename": "weapons", "qualname": "Projectile.damage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Projectile.move", "modulename": "weapons", "qualname": "Projectile.move", "kind": "function", "doc": "<p>Update the projectile's position based on its direction and speed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Projectile.projectile_hits_enemy", "modulename": "weapons", "qualname": "Projectile.projectile_hits_enemy", "kind": "function", "doc": "<p>Checks for any collision with enemies. If collision, does projectile damage to the enemy and returns True</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_room</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Projectile.projectile_hits_object", "modulename": "weapons", "qualname": "Projectile.projectile_hits_object", "kind": "function", "doc": "<p>Checks for collision with objects. If collision, returns True.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_room</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Projectile.projectile_hits_player", "modulename": "weapons", "qualname": "Projectile.projectile_hits_player", "kind": "function", "doc": "<p>This method is only used on enemy projectiles. It currently doesn't work properly. Will return True when collision with player is detected.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Projectile.projectile_out_of_bounds", "modulename": "weapons", "qualname": "Projectile.projectile_out_of_bounds", "kind": "function", "doc": "<p>Removes any projectiles That go off-screen.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">screen_width</span>, </span><span class=\"param\"><span class=\"n\">screen_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weapons.Shotgun", "modulename": "weapons", "qualname": "Shotgun", "kind": "class", "doc": "<p>Child of Weapon with a different attack method</p>\n", "bases": "Weapon"}, {"fullname": "weapons.Shotgun.__init__", "modulename": "weapons", "qualname": "Shotgun.__init__", "kind": "function", "doc": "<p>Shotgun init function, essentially the same as it's Parent Weapon</p>\n\n<p>spread (int): Determines the degrees of spread in the shotgun.\nproj_number (int): Determines the number of pellets shot out of the shotgun.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">damage</span>,</span><span class=\"param\">\t<span class=\"n\">proj_speed</span>,</span><span class=\"param\">\t<span class=\"n\">attack_speed</span>,</span><span class=\"param\">\t<span class=\"n\">mag_size</span>,</span><span class=\"param\">\t<span class=\"n\">mag_count</span>,</span><span class=\"param\">\t<span class=\"n\">reload_speed</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span>,</span><span class=\"param\">\t<span class=\"n\">spread</span>,</span><span class=\"param\">\t<span class=\"n\">proj_number</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">height</span>,</span><span class=\"param\">\t<span class=\"n\">screen_width</span>,</span><span class=\"param\">\t<span class=\"n\">screen_height</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span></span>)</span>"}, {"fullname": "weapons.Shotgun.spread", "modulename": "weapons", "qualname": "Shotgun.spread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Shotgun.proj_number", "modulename": "weapons", "qualname": "Shotgun.proj_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "weapons.Shotgun.attack", "modulename": "weapons", "qualname": "Shotgun.attack", "kind": "function", "doc": "<p>See Weapon.attack for more details. Primary differences in comments:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();